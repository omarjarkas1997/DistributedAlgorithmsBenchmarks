skel Proc {
  local nrcvd, pc;
  shared nsnt, nsntF;
  parameters N;
  assumptions (1) {
    N > 1;
  }

  locations (6) {
    loc0_0: [0; 0];
    loc1_2: [1; 2];
    loc1_3: [1; 3];
    loc0_1: [0; 1];
    loc0_2: [0; 2];
    loc0_3: [0; 3];
  }

  inits (7) {
    (loc0_1 + loc0_0) == N;
    loc1_2 == 0;
    loc1_3 == 0;
    loc0_2 == 0;
    loc0_3 == 0;
    nsnt == 0;
    nsntF == 0;
  }

  rules (8) {
  0: loc0_0 -> loc1_3
      when ((nsnt + nsntF) >= 1)
      do { nsnt' == nsnt; nsntF' == (nsntF + 1) };
  1: loc0_0 -> loc1_2
      when ((nsnt + nsntF) >= 1)
      do { nsnt' == (nsnt + 1); nsntF' == nsntF };
  2: loc0_3 -> loc1_3
      when ((nsnt + nsntF) >= 1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  3: loc0_2 -> loc1_2
      when ((nsnt + nsntF) >= 1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  4: loc0_1 -> loc0_3
      when (((nsnt + nsntF) >= 1  ||  (nsnt + nsntF) == 0))
      do { nsnt' == nsnt; nsntF' == (nsntF + 1) };
  5: loc0_1 -> loc0_2
      when (((nsnt + nsntF) >= 1  ||  (nsnt + nsntF) == 0))
      do { nsnt' == (nsnt + 1); nsntF' == nsntF };
  6: loc0_1 -> loc1_3
      when ((nsnt + nsntF) >= 1)
      do { nsnt' == nsnt; nsntF' == (nsntF + 1) };
  7: loc0_1 -> loc1_2
      when ((nsnt + nsntF) >= 1)
      do { nsnt' == (nsnt + 1); nsntF' == nsntF };
  }
} /* Proc */

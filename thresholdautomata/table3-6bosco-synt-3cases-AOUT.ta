/* a template for BOSCO */

skel Proc {
  /* the control locations are as follows:
    0 is the initial state with value 0,
    1 is the initial state with value 1,
    2 is the state with value 0 sent,
    3 is the state with value 1 sent,
    4 is the state "decided on 0",
    5 is the state "decided on 1",
    6 is the state "called underlying consensus with value 0",
    7 is the state "called underlying consensus with value 1",
   */
  local pc;
  /* the number of messages sent by the correct processes */
  shared nsnt0 /* sent 0 */, nsnt1 /* sent 1 */, nsnt01 /* the sum */;
  parameters N, T, F;
  /* the constants to be found by synthesis */
  unknowns a1, b1, a2, b2, a3, b3, a4, b4, a5, b5,
           c1, c2, c3, c4, c5, z1, z2, z3, z4, z5;

  define THRESH1 == a1 * N + b1 * T + c1;
  define THRESH2 == a2 * N + b2 * T + c2;
  define THRESH3 == a3 * N + b3 * T + c3;
  define THRESH4 == a4 * N + b4 * T + c4;
  define THRESH5 == a5 * N + b5 * T + c5;

  assumptions (1) {
    0 <= a1; a1 <= 2;
    0 <= a2; a2 <= 2;
    0 <= a3; a3 <= 2;
    0 <= a4; a4 <= 2;
    0 <= a5; a5 <= 2;
    /* we take a conservative estimate for n > 7t */
    -16 <= b1; b1 <= 16;
    -16 <= b2; b2 <= 16;
    -16 <= b3; b3 <= 16;
    -16 <= b4; b4 <= 16;
    -16 <= b5; b5 <= 16;
    -32 <= c1; c1 <= 32;
    -32 <= c2; c2 <= 32;
    -32 <= c3; c3 <= 32;
    -32 <= c4; c4 <= 32;
    -32 <= c5; c5 <= 32;
    /* fix then denominators to 2 to have only unique solutions
       for x/1 and x/2 */
    z1 == 2;
    z2 == 2;
    z3 == 2;
    z4 == 2;
    z5 == 2;
    N > 3 * T;
    T >= F;
    T >= 1;
    
    /* assume symmetric rules for 0 and 1 */
    a2 == a3; b2 == b3; c2 == c3; z2 == z3;
    a4 == a5; b4 == b5; c4 == c5; z4 == z5;

    /* if we exclude the right answer, there will be no solution: */
    /* a1 != 1 ||  b1 != -1 ||  z1 != 1
        || a2 != 1 ||  b2 != 3 ||  z2 != 2
        || a3 != 1 ||  b3 != 3 ||  z3 != 2
        || a4 != 1 ||  b4 != -1 ||  z4 != 2
        || a5 != 1 ||  b5 != -1 ||  z5 != 2;
    */

    /* this would be the right answer from the BOSCO paper...
    a1 == 1; b1 == -1; z1 == 1;
    a2 == 1; b2 == 3; z2 == 2;
    a3 == 1; b3 == 3; z3 == 2;
    a4 == 1; b4 == -1; z4 == 2;
    a5 == 1; b5 == -1; z5 == 2;
    */
  }

  locations (7) {
    loc0: [0]; loc1: [1]; loc2: [2]; loc3: [3];
    loc4: [4]; loc5: [5]; loc6: [6]; loc7: [7];
  }

  inits (8) {
    (loc0 + loc1) == N - F;
    loc2 == 0; loc3 == 0; loc4 == 0;
    loc5 == 0; loc6 == 0; loc7 == 0;
    nsnt0 == 0; nsnt1 == 0; nsnt01 == 0;
  }

  rules (0) {
  /* send message 0 (resp. 1) when initialized with value 1 (resp. 1) */
  0: loc0 -> loc2
      when (true)
      do { nsnt0' == nsnt0 + 1; nsnt1' == nsnt1; nsnt01' == nsnt01 + 1; };
  1: loc1 -> loc3
      when (true)
      do { nsnt0' == nsnt0; nsnt1' == nsnt1 + 1; nsnt01' == nsnt01 + 1; };

  /* decide immediately */
  2: loc2 -> loc4 /* decide on value 0 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 >= THRESH2 - z2 * F))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  3: loc3 -> loc5 /* decide on value 1 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z3 * nsnt1 >= THRESH3 - z3 * F))
      do { unchanged(nsnt0, nsnt1, nsnt01); };

  /* fall back to the underlying consensus with a vote */
  4: loc2 -> loc6 /* underlying consensus 0 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 >= THRESH4 - z4 * F)
                && (z5 * nsnt1 < THRESH5))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  5: loc3 -> loc6 /* underlying consensus 0 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 >= THRESH4 - z4 * F)
                && (z5 * nsnt1 < THRESH5))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  6: loc2 -> loc7 /* underlying consensus 1 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 < THRESH4)
                && (z5 * nsnt1 >= THRESH5 - z5 * F))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  7: loc3 -> loc7 /* underlying consensus 1 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 < THRESH4)
                && (z5 * nsnt1 >= THRESH5 - z5 * F))
      do { unchanged(nsnt0, nsnt1, nsnt01); };

  /* fall through with the initial value */
  8: loc2 -> loc6 /* underlying consensus 0 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 < THRESH4)
                && (z5 * nsnt1 < THRESH5))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  9: loc2 -> loc6 /* underlying consensus 0 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 >= THRESH4 - z4 * F)
                && (z5 * nsnt1 >= THRESH5 - z5 * F))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  10: loc3 -> loc7 /* underlying consensus 1 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 < THRESH4)
                && (z5 * nsnt1 < THRESH5))
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  11: loc3 -> loc7 /* underlying consensus 1 */
      when ((z1 * nsnt01 >= THRESH1 - z1 * F)
                && (z2 * nsnt0 < THRESH2)
                && (z3 * nsnt1 < THRESH3)
                && (z4 * nsnt0 >= THRESH4 - z4 * F)
                && (z5 * nsnt1 >= THRESH5 - z5 * F))
      do { unchanged(nsnt0, nsnt1, nsnt01); };

  /* self loops */
  12: loc0 -> loc0
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  13: loc1 -> loc1
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  14: loc2 -> loc2
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  15: loc3 -> loc3
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };

  16: loc4 -> loc4
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  17: loc5 -> loc5
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  18: loc6 -> loc6
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  19: loc7 -> loc7
      when (true)
      do { unchanged(nsnt0, nsnt1, nsnt01); };
  }

  specifications (0) {
    sanity:
        (THRESH1 >= 0 && THRESH1 <= z1 * (N + 1)
            && THRESH2 >=  0 && THRESH2 <= z2 * (N + 1)
            && THRESH3 >= 0 && THRESH3 <= z3 * (N + 1)
            && THRESH4 >= 0 && THRESH4 <= z4 * (N + 1)
            && THRESH5 >= 0 && THRESH5 <= z5 * (N + 1)
        );

    /* one-step safety */

    one_step0:
        ((F == 0 && N > 5 * T) || (N > 7 * T))
        -> (loc1 == 0 -> [](loc5 == 0 && loc6 == 0 && loc7 == 0));

    one_step1:
        ((F == 0 && N > 5 * T) || (N > 7 * T))
        -> (loc0 == 0 -> [](loc4 == 0 && loc6 == 0 && loc7 == 0));

    /* safety */
    lemmas34_0: []((loc4 != 0) -> [](loc5 == 0 && loc7 == 0));
    lemmas34_1: []((loc5 != 0) -> [](loc4 == 0 && loc6 == 0));

    /* the fairness constraints here should be encoded with respect to
       Byzantine faults, thus, we add -f, where needed */

    /* fast convergence */
    fast0: /* U: note that N >= 5 * T */
        (((F == 0 && N >= 5 * T) || (N > 7 * T))
            && <>[](((z1 * nsnt01 < THRESH1)
            || (z2 * nsnt0 < THRESH2)
            || loc2 == 0)
                    && loc0 == 0 && loc1 == 0))
        ->
        (loc1 == 0
            -> <>(loc0 == 0 && loc1 == 0 && loc2 == 0 && loc3 == 0
                    && loc5 == 0 && loc6 == 0 && loc7 == 0));
    fast1: /* U: note that N >= 5 * T */
        (((F == 0 && N >= 5 * T) || (N > 7 * T))
            && <>[](((z1 * nsnt01 < (a1 * N + b1 * T + c1))
            || (z3 * nsnt1 < THRESH3)
            || loc3 == 0)
                    && loc0 == 0 && loc1 == 0))
        ->
        (loc0 == 0
            -> <>(loc0 == 0 && loc1 == 0 && loc2 == 0 && loc3 == 0
                    && loc4 == 0 && loc6 == 0 && loc7 == 0));

    /* convergence (either fast or slow) */
    /*
    termination:
        (<>[]((
                (z1 * nsnt01 < THRESH1)
                || (z2 * nsnt0 < THRESH2)
                || (z3 * nsnt1 < THRESH3)
                || (z4 * nsnt0 < THRESH4)
                || (z5 * nsnt0 < THRESH5)
                || (loc2 == 0 && loc3 == 0))
            && loc0 == 0 && loc1 == 0))
        ->
        <>(loc0 == 0 && loc1 == 0 && loc2 == 0 && loc3 == 0);
        */
  }
} /* Proc */


